
bin\Debug\timer0pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  000001cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002f7  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014d  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000252  00000000  00000000  00000647  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e3  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000090  00000000  00000000  0000099f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
    TCCR0A|=(1<<COM0A1)|(1<<WGM00)|(1<<WGM00);
  80:	84 b5       	in	r24, 0x24	; 36
  82:	81 68       	ori	r24, 0x81	; 129
  84:	84 bd       	out	0x24, r24	; 36
    TCCR0B|=(1<<CS01)|(1<<CS00);
  86:	85 b5       	in	r24, 0x25	; 37
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	85 bd       	out	0x25, r24	; 37
    DDRD|=(1<<PD6);
  8c:	56 9a       	sbi	0x0a, 6	; 10

    while(1)
    {
        OCR0A=10;
  8e:	6a e0       	ldi	r22, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	40 e9       	ldi	r20, 0x90	; 144
  92:	51 e0       	ldi	r21, 0x01	; 1
        _delay_ms(200);
         OCR0A=50;
  94:	72 e3       	ldi	r23, 0x32	; 50
        _delay_ms(200);
         OCR0A=100;
  96:	e4 e6       	ldi	r30, 0x64	; 100
        _delay_ms(200);
         OCR0A=150;
  98:	f6 e9       	ldi	r31, 0x96	; 150
        _delay_ms(200);
         OCR0A=200;
  9a:	a8 ec       	ldi	r26, 0xC8	; 200
        _delay_ms(200);
         OCR0A=250;
  9c:	ba ef       	ldi	r27, 0xFA	; 250
    TCCR0B|=(1<<CS01)|(1<<CS00);
    DDRD|=(1<<PD6);

    while(1)
    {
        OCR0A=10;
  9e:	67 bd       	out	0x27, r22	; 39
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	ca 01       	movw	r24, r20
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x26>
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	20 3d       	cpi	r18, 0xD0	; 208
  b2:	38 07       	cpc	r19, r24
  b4:	b9 f7       	brne	.-18     	; 0xa4 <main+0x24>
        _delay_ms(200);
         OCR0A=50;
  b6:	77 bd       	out	0x27, r23	; 39
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	ca 01       	movw	r24, r20
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x3e>
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	87 e0       	ldi	r24, 0x07	; 7
  c8:	20 3d       	cpi	r18, 0xD0	; 208
  ca:	38 07       	cpc	r19, r24
  cc:	b9 f7       	brne	.-18     	; 0xbc <main+0x3c>
        _delay_ms(200);
         OCR0A=100;
  ce:	e7 bd       	out	0x27, r30	; 39
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	ca 01       	movw	r24, r20
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x56>
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	20 3d       	cpi	r18, 0xD0	; 208
  e2:	38 07       	cpc	r19, r24
  e4:	b9 f7       	brne	.-18     	; 0xd4 <main+0x54>
        _delay_ms(200);
         OCR0A=150;
  e6:	f7 bd       	out	0x27, r31	; 39
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	ca 01       	movw	r24, r20
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x6e>
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	20 3d       	cpi	r18, 0xD0	; 208
  fa:	38 07       	cpc	r19, r24
  fc:	b9 f7       	brne	.-18     	; 0xec <main+0x6c>
        _delay_ms(200);
         OCR0A=200;
  fe:	a7 bd       	out	0x27, r26	; 39
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	ca 01       	movw	r24, r20
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x86>
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	87 e0       	ldi	r24, 0x07	; 7
 110:	20 3d       	cpi	r18, 0xD0	; 208
 112:	38 07       	cpc	r19, r24
 114:	b9 f7       	brne	.-18     	; 0x104 <main+0x84>
        _delay_ms(200);
         OCR0A=250;
 116:	b7 bd       	out	0x27, r27	; 39
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	ca 01       	movw	r24, r20
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x9e>
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	87 e0       	ldi	r24, 0x07	; 7
 128:	20 3d       	cpi	r18, 0xD0	; 208
 12a:	38 07       	cpc	r19, r24
 12c:	b9 f7       	brne	.-18     	; 0x11c <main+0x9c>
 12e:	b7 cf       	rjmp	.-146    	; 0x9e <main+0x1e>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
